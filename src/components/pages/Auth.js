import React, { useState } from "react";
import { useNavigate, useLocation, Link } from "react-router-dom";
import { useNotification } from "../contexts/NotificationContext";
import { API_BASE_URL } from '../../config';
import axios from "axios";
import '../styles/Auth.css';

const Auth = () => {
    const [passwordVisible, setPasswordVisible] = useState(false);
    const [formData, setFormData] = useState({
        email: "",
        password: "",
        rememberMe: false,
    });
    const [error, setError] = useState(null);

    const navigate = useNavigate();
    const location = useLocation(); // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—É—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ—Ä–∑–∏–Ω–∞)
    const { showNotification } = useNotification(); // –•—É–∫ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

    const togglePasswordVisibility = () => {
        setPasswordVisible(!passwordVisible);
    };

    const handleChange = (e) => {
        const { name, value, type, checked } = e.target;
        setFormData({
            ...formData,
            [name]: type === 'checkbox' ? checked : value,
        });
    };

    const handleLogin = async (e) => {
        e.preventDefault();

        if (!formData.email || !formData.password) {
            setError("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è");
            return;
        }

        try {
            const response = await axios.post(`${API_BASE_URL}/auth/login`, formData, {
                headers: {
                    "Content-Type": "application/json",
                },
            });

            const { token } = response.data;
            if (formData.rememberMe) {
                localStorage.setItem("token", token);
            } else {
                sessionStorage.setItem("token", token);
            }
            showNotification({
                type: 'success',
                message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!',
            });

            // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º
            const redirectPath = new URLSearchParams(location.search).get('redirect') || '/profile';
            navigate(redirectPath);
        } catch (error) {
            setError(error.response?.data?.message || "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");
        }
    };

    const handleRegistration = () => {
        navigate("/registration");
    };

    return (
        <div className="auth">
            <h1>–í—Ö–æ–¥ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</h1>
            <form className="auth-form" onSubmit={handleLogin}>
                <label>–õ–æ–≥–∏–Ω <span className="required">*</span></label>
                <div className="input-wrapper">
                    <input
                        type="text"
                        name="email"
                        maxLength="320"
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω"
                        value={formData.email}
                        onChange={handleChange}
                        required
                    />
                </div>

                <label>–ü–∞—Ä–æ–ª—å <span className="required">*</span></label>
                <div className="input-wrapper">
                    <input
                        type={passwordVisible ? "text" : "password"}
                        name="password"
                        maxLength="30"
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                        value={formData.password}
                        onChange={handleChange}
                        required
                    />
                    <button type="button" className="toggle-password" onClick={togglePasswordVisibility}>
                        {passwordVisible ? "üîì" : "üîí"}
                    </button>
                </div>
                {error && <div className="error">{error}</div>}
                <div className="auth-options">
                    <div className="remember-me">
                        <input
                            type="checkbox"
                            id="remember"
                            name="rememberMe"
                            checked={formData.rememberMe}
                            onChange={handleChange}
                        />
                        <label className="remember-label" htmlFor="remember">–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è</label>
                    </div>
                    <Link to="/reset-password">–ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?</Link>
                </div>

                <div className="auth-buttons">
                    <button type="submit">–í—Ö–æ–¥</button>
                    <button type="button" onClick={handleRegistration}>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</button>
                </div>
            </form>
        </div>
    );
};

export default Auth;
